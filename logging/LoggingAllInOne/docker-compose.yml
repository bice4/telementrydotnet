services:
  
  loki:
    image: grafana/loki:2.9.1
    command: -config.file=/mnt/config/loki-config.yml
    volumes:
      - ./Configs/loki.yml:/mnt/config/loki-config.yml
    ports:
      - "127.0.0.1:3100:3100"
    networks:
      - backend

  grafana:
    image: grafana/grafana:10.1.4
    environment:
      - GF_AUTH_ANONYMOUS_ENABLED=true
      - GF_AUTH_ANONYMOUS_ORG_ROLE=Admin
      - GF_AUTH_DISABLE_LOGIN_FORM=true
    volumes:
      - ./Configs/grafana.ini:/etc/grafana/grafana.ini
      - ./Configs/logs-dashboard.json:/etc/grafana/provisioning/dashboards/logs-dashboard.json
      - ./Configs/datasource.yml:/etc/grafana/provisioning/datasources/datasource.yaml
    ports:
      - "127.0.0.1:3000:3000"
    networks:
      - backend
  
  api:
    image: apigateway
    build:
      context: ./ApiGateway .
      dockerfile: ./AnotherService/Dockerfile
    ports:
      - "8040:8040"
    volumes:
      - ../Logs:/app/Logs
    networks:
      - backend
    environment:
      - ASPNETCORE_ENVIRONMENT=Docker
      - ASPNETCORE_URLS=http://+:8040
      - SERVICE_COUNT=3
  
  anotherservice1:
    image: anotherservice
    build:
      context: .
      dockerfile: AnotherService/Dockerfile
    ports:
      - "8041:8041"
    volumes:
      - ../Logs:/app/Logs
    networks:
      - backend
    environment:
      - ASPNETCORE_ENVIRONMENT=Docker
      - ASPNETCORE_URLS=http://+:8041
      - SERVICE_NAME=AnotherService1
      - TimerIntervalMs=3000
  
  
  anotherservice2:
    image: anotherservice
    build:
      context: .
      dockerfile: AnotherService/Dockerfile
    ports:
      - "8042:8041"
    volumes:
      - ../Logs:/app/Logs
    networks:
      - backend
    environment:
      - ASPNETCORE_ENVIRONMENT=Docker
      - ASPNETCORE_URLS=http://+:8041
      - SERVICE_NAME=AnotherService2
      - TimerIntervalMs=4000
  
  anotherservice3:
    image: anotherservice
    build:
      context: .
      dockerfile: AnotherService/Dockerfile
    ports:
      - "8043:8041"
    volumes:
      - ../Logs:/app/Logs
    depends_on:
      - api
    networks:
      - backend
    environment:
      - ASPNETCORE_ENVIRONMENT=Docker
      - ASPNETCORE_URLS=http://+:8041
      - SERVICE_NAME=AnotherService3
      - TimerIntervalMs=5000
        
networks:
  backend: